1 create chat table
2 r&d ws gorilla & js
3 plaining logic - chat client - server 
4 write project
5 spa - render chat page
6 js logic
7 back end logic
//addNewUser chan -> plain - todo

    // chrome fix -> chat -> fix own user id client or service bug
    //update online users
    //room random generate new chat

    		//use	
               function onLoad() {
                  var wsUri = "ws://127.0.0.1:7777";
                  websocket = new WebSocket(wsUri);
                  websocket.onopen = function(evt) { onOpen(evt) };
                  websocket.onclose = function(evt) { onClose(evt) };
                  websocket.onmessage = function(evt) { onMessage(evt) };
                  websocket.onerror = function(evt) { onError(evt) };
               }
					
               function onOpen(evt) {
                  state.className = "success";
                  state.innerHTML = "Connected to server";
               }

//fix - if server drop -> need auth ? wtf 
//fix repo - retiurn http status 
//add graceful shutdown todo server stop
//GetJsonData - standard use
 category == "" fleible create - modeartor
Path:    "/api/getusers", fix 1 ednpoint - 1 func
//http query refactor ? getListUsers()
//add time, name - in chat window

// use Observer - for notiffy
// ws1 -> send ws2 data 
chat.js -> if !auth -> redirect
//save global objec.Users -> each new user

//api/chat -> add user in map -connect, send msg user - getuuid -> send server
//server search in Map.users -> Writemessage else save db

- public/follower - create - 1 logic, page create dynamic, type - other - SN

signin -> user_id -> add map[uid : wsconn]
uid -> sendMessage -> getUid(sender) in backend -> send message -> sender(getSenderId) -> getListUser()
 Например ws1.send(msg, receiverUuid) -> server handleWS() -> getConnByUuid([]mapClients[receiveUUid]),
broadcast -> findConn(receiverConn) -> wirete.Message


//show ListUsers, show Histroy users
//join user -> if click by user || send frist message ??

//test mcok or unit
erros -> goroutine ?
//add image profile/post
use -> begintransact - concurrent query

//fix warning and erros - js browser
        // validParams - > postId > 0, userId > 0, middleware

//notify ->  for message, when mes send user1 -> & chatPage user2, notify - no show else show(websocket)

//valid data signup, create post - backend
        // another url path - > server error fix backend
//time - correct show - backend profile
// update, delete, etc backend