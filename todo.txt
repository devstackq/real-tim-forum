1 create chat table
2 r&d ws gorilla & js
3 plaining logic - chat client - server 
4 write project
5 spa - render chat page
6 js logic
7 back end logic
//addNewUser chan -> plain - todo

// use Observer - for notiffy
// ws1 -> send ws2 data 

- public/follower - create - 1 logic, page create dynamic, type - other - SN

signin -> user_id -> add map[uid : wsconn]
uid -> sendMessage -> getUid(sender) in backend -> send message -> sender(getSenderId) -> getListUser()
 Например ws1.send(msg, receiverUuid) -> server handleWS() -> getConnByUuid([]mapClients[receiveUUid]),
broadcast -> findConn(receiverConn) -> wirete.Message


//show ListUsers, show Histroy users
//join user -> if click by user || send frist message ??


//test mcok or unit
erros -> goroutine ?
//add image profile/post
use -> begintransact - concurrent query
//fix warning and erros - js browser
        // validParams - > postId > 0, userId > 0, middleware

//notify ->  for message, when mes send user1 -> & chatPage user2, notify - no show else show(websocket)

//valid data signup, create post - backend
        // another url path - > server error fix backend
//time - correct show - backend profile
// update, delete, etc backend