1 create chat table
2 r&d ws gorilla & js
3 plaining logic - chat client - server 
4 write project
5 spa - render chat page
6 js logic
7 back end logic
dry func - service repo - > insert utils.go DRY 

add in global constructor listusers -> then everwhere USE -> delete pus, etc
//if disconnect user -> delete - this.users & server side delete 
correct show another data -> chat field

scroll inside - chat textarea
html elems -> in costructor ? 
click user msg -> another users hidden

leave user - delete server conn - if logout or close window or change endpoint ?
addded user online update in clien side - real time update

history message another users list 

    // chrome fix -> chat -> fix own user id client or service bug
    //update online users
    //room random generate new chat

try    		//use	
               function onLoad() {
                  var wsUri = "ws://127.0.0.1:7777";
                  websocket = new WebSocket(wsUri);
                  websocket.onopen = function(evt) { onOpen(evt) };
                  websocket.onclose = function(evt) { onClose(evt) };
                  websocket.onmessage = function(evt) { onMessage(evt) };
                  websocket.onerror = function(evt) { onError(evt) };
               }
					
               function onOpen(evt) {
                  state.className = "success";
                  state.innerHTML = "Connected to server";
               }

//fix - if server drop -> need auth ? wtf 
//fix repo - retiurn http status 
//add graceful shutdown todo server stop
//GetJsonData - standard use
 category == "" fleible create - modeartor
Path:    "/api/getusers", fix 1 ednpoint - 1 func
//http query refactor ? getListUsers()
//add time, name - in chat window

// use Observer - for notiffy
// ws1 -> send ws2 data 
chat.js -> if !auth -> redirect
//save global objec.Users -> each new user

//api/chat -> add user in map -connect, send msg user - getuuid -> send server
//server search in Map.users -> Writemessage else save db

- public/follower - create - 1 logic, page create dynamic, type - other - SN


signin -> user_id -> add map[uid : wsconn]
uid -> sendMessage -> getUid(sender) in backend -> send message -> sender(getSenderId) -> getListUser()
 Например ws1.send(msg, receiverUuid) -> server handleWS() -> getConnByUuid([]mapClients[receiveUUid]),
broadcast -> findConn(receiverConn) -> wirete.Message


//show ListUsers, show Histroy users
//join user -> if click by user || send frist message ??

//test mcok or unit
erros -> goroutine ?
//add image profile/post
use -> begintransact - concurrent query

//fix warning and erros - js browser
        // validParams - > postId > 0, userId > 0, middleware

//notify ->  for message, when mes send user1 -> & chatPage user2, notify - no show else show(websocket)

//valid data signup, create post - backend
        // another url path - > server error fix backend
//time - correct show - backend profile
// update, delete, etc backend

-- foreign key -> on delete -> if Table A - field V, -> references -> Table B, field(id) 
if Table B(id =3 ) - deleted -> TableA delete pointer -> field = nil

Left join - 2 table join, Table A, field 2, -> Condition (ON ) TableA.fieldX = TableB.fieldX -> 
get All Rows -> Cond - Equal

fk - consistent, join, 1 table row FK - relat table2 by PK


    // leave service
    // setInterval -> server side, listuser ?
          // click - active - current class user - click toodo
      //if new user add -> server side -> ws.send - case : "newuser"
      if user online & newmessage -> set class - new message, -> icon Ring -> add class - .msg, if read -> delete everewhere
      //fix - style - position chat users - and chat window, style
      //uyse debounce - getScrollMessages

      //if server exit -> reload users in system ?, if have session -> restore /chat

      //  f5 click -> new request -> get users()

      fix correct show list user, leave user, reSession case added, server shutdown -> reconnect () but have refresh page

      fix2: chatWindows -> click -> profile -> again click Chat - mot work or its ok ??

done:
fix : signin -> redirect profile, sendMessage(), getHistoryUser(), case :   no msessage, lastmessage, resession -> update conn
now : same user signin - logout ->  no add listUsers -> window.reload() - if resession


---------
ref:? all route -> if auth -> addnewuser?
ref:? getMessage? http ? !ws


 //TODO: sorted, err := cs.repository.GetUsersChat() optimize sqlQuery
1wtf no work - goroutine - 1 seq[]struct*
      //fix send message
      chrome - fix hide prev messages - if nomessage
      fix- show senderName
      fix - > newuser - signin -> all message duplciate ? userid? - maybe need change Listuser -> ? 
2

UsersList:
1case : users sortUsersByTime  -> asc
2case : another users -> not have chat -> alhpa sort
3case : receiver -> onmessage : lastMessage -> sortUsersByTime; sender(sendNewMEssage) -> sortUsersByTime()
4case: chatted users -> onfocus - by userid = url params
server getAllUser -> checkIfHasChat sender == another; add GroupHistory else GroupOther

UL case1: /chat : ListsUsers.History[] - if have rooms (receiver, sender) ->


Online case:
addNewUser -> findByUUID in ListUsers[].status = online
else  if Logout, etc case -> offline;
Client side: case listusers -> if User[i].status =='online -> addClass(online)

listmessages: sql when, debounce
notify:

insight
//ByTime = user send uuid if have else add userid, client check if have uuid and correct -> add class onlin -else -> offline

//  compare CS.Listuser == ByTime & ByAlpha -> if equalUser -> user.state = online

1sql query -> left join use, perfomance low, ref 1 query

//comment service todo

Social network
left join use, interface use, oop use, gorouitine use
1 ref table, chat, chatusers, messages, - relations
2 ref arch  - addUser, sendMsg, - for new db

Done:
GetCreatedUserPosts, GetCreatedUserVote - refactor - Left  Join - done
fix- header - /chat , isAuth
fix -/chat -> if no session -> logout


//fix - new user signup -> another user - not show, in online

time format fix -message_sent_timevalidation - signup check

Message by scroll
Nptififaction - logic done, add field in messages table


check case - ressesion -> get chat ? no duplicate ?
check case 2 - signup -> signin - other user - can see new user ?

done:
  //fix show message - case nomessages UserName
  // fix - updated message from anther client - lastmessage
  // fix-> show : receipment  name
  //fix - send message -listUsers , show Receipment Name fixed, div-inside, div, each time, no delete Receip name, and clear another data
  //fix  todo : lastmessage - listusers - lastmessage show, & add chat with Username
//fix online, leave user - set id/uuid
fix - first user - signup


logout-signin -> same user, update - allusers[uuid], 
fix - curerentChat - no getMessage()
fix signin, logout, signin -> by uuid not find messages


fix - 1user create - not show another user -> list users
 //todo: fix - logout wsconn null

 fix logout - another user - null
 //header - fix, auth, etc case
//logout -> leave case -> set id - undefinde fix

//fix - send msg,  - show lastmessage - userWindwos

  //hard case -> reSignin another browser
  //signup -> show list users correct ?

  
  //1 fix - another user signup, - no correct sort, js side
//2 fix - focus user 5, send msg user 5, then focuse change user 3, again send msg user5, -> here 